import psycopg2
import os
from dotenv import load_dotenv
from datetime import date

# Load environment variables
load_dotenv()
DB_NAME = os.getenv('25037!')
DB_USER = os.getenv('postgres')
DB_PASS = os.getenv('Iamstrong22082000!')
DB_HOST = os.getenv('localhost')

def get_db_connection():
    """Establishes a connection to the PostgreSQL database."""
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASS,
            host=DB_HOST
        )
        return conn
    except psycopg2.Error as e:
        print(f"Error connecting to the database: {e}")
        return None

# --- User Management ---
def get_user_by_email(email):
    """Fetches a user's details by email."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id, name, email, role FROM users WHERE email = %s", (email,))
                user_data = cur.fetchone()
                return user_data
        except psycopg2.Error as e:
            print(f"Error fetching user: {e}")
            return None
        finally:
            conn.close()
    return None

def add_new_user(name, email, role):
    """Adds a new user to the system."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO users (name, email, role) VALUES (%s, %s, %s) RETURNING user_id",
                    (name, email, role)
                )
                user_id = cur.fetchone()[0]
                conn.commit()
                return user_id
        except psycopg2.IntegrityError:
            print("User with this email already exists.")
            conn.rollback()
        except psycopg2.Error as e:
            print(f"Error adding user: {e}")
            conn.rollback()
        finally:
            conn.close()
    return None

# --- Goal Management (Manager Only) ---
def create_goal(manager_id, employee_id, description, due_date):
    """Creates a new goal for an employee."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO goals (manager_id, employee_id, description, due_date, status) VALUES (%s, %s, %s, %s, 'Draft') RETURNING goal_id",
                    (manager_id, employee_id, description, due_date)
                )
                goal_id = cur.fetchone()[0]
                conn.commit()
                return goal_id
        except psycopg2.Error as e:
            print(f"Error creating goal: {e}")
            conn.rollback()
        finally:
            conn.close()
    return None

def update_goal_status(goal_id, status):
    """Updates the status of a specific goal."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "UPDATE goals SET status = %s WHERE goal_id = %s",
                    (status, goal_id)
                )
                conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"Error updating goal status: {e}")
            conn.rollback()
        finally:
            conn.close()
    return False

# --- Task Management (Employee & Manager) ---
def get_goals_for_employee(employee_id):
    """Fetches all goals for a specific employee."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT g.goal_id, g.description, g.due_date, g.status, u.name AS manager_name "
                    "FROM goals g JOIN users u ON g.manager_id = u.user_id "
                    "WHERE g.employee_id = %s ORDER BY g.due_date", (employee_id,)
                )
                goals = cur.fetchall()
                return goals
        except psycopg2.Error as e:
            print(f"Error fetching goals: {e}")
            return []
        finally:
            conn.close()
    return []

def get_tasks_for_goal(goal_id):
    """Fetches all tasks for a specific goal."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT task_id, description, is_approved FROM tasks WHERE goal_id = %s ORDER BY created_at",
                    (goal_id,)
                )
                tasks = cur.fetchall()
                return tasks
        except psycopg2.Error as e:
            print(f"Error fetching tasks: {e}")
            return []
        finally:
            conn.close()
    return []

def add_task_to_goal(goal_id, employee_id, description):
    """Adds a new task for a goal."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO tasks (goal_id, employee_id, description) VALUES (%s, %s, %s)",
                    (goal_id, employee_id, description)
                )
                conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"Error adding task: {e}")
            conn.rollback()
        finally:
            conn.close()
    return False

def approve_task(task_id):
    """Approves a specific task."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "UPDATE tasks SET is_approved = TRUE WHERE task_id = %s",
                    (task_id,)
                )
                conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"Error approving task: {e}")
            conn.rollback()
        finally:
            conn.close()
    return False

# --- Feedback & Reporting ---
def give_feedback(goal_id, manager_id, comments):
    """Logs feedback for a specific goal."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO feedback (goal_id, manager_id, comments) VALUES (%s, %s, %s)",
                    (goal_id, manager_id, comments)
                )
                conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"Error giving feedback: {e}")
            conn.rollback()
        finally:
            conn.close()
    return False

def get_employee_goals_and_feedback(employee_id):
    """Fetches a full performance history for an employee."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT g.goal_id, g.description, g.due_date, g.status, f.comments, g.created_at "
                    "FROM goals g LEFT JOIN feedback f ON g.goal_id = f.goal_id "
                    "WHERE g.employee_id = %s ORDER BY g.created_at DESC", (employee_id,)
                )
                report_data = cur.fetchall()
                return report_data
        except psycopg2.Error as e:
            print(f"Error fetching report: {e}")
            return []
        finally:
            conn.close()
    return []

def get_employees_by_manager(manager_id):
    """Fetches a list of employees managed by a specific manager."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id, name FROM users WHERE manager_id = %s", (manager_id,))
                employees = cur.fetchall()
                return employees
        except psycopg2.Error as e:
            print(f"Error fetching employees for manager: {e}")
            return []
        finally:
            conn.close()
    return []
